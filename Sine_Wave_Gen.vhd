-- Generated by sine_wave_generator.c
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Sine_Wave_Gen is
generic (
    IP_INPUT_FREQUENCY         : integer := 100000000; --- in Hz
    OUTPUT_SIGNAL_FREQUENCY    : integer := 50;        --- in Hz, max = M_AXIS_ACLK/256, if you need more, make MAX_OUTPUT_SIGNAL_FRQ true
    MAX_OUTPUT_SIGNAL_FRQ      : boolean := false      --- true this if you need more than M_AXIS_ACLK/256 then you can achieve M_AXIS_ACLK/128
);
Port (
    M_AXIS_ACLK    : in STD_LOGIC;
    M_AXIS_ARESETN : in STD_LOGIC;   --- negative asynch reset
    M_AXIS_tDATA   : out std_logic_vector(15 downto 0);
    M_AXIS_tVALID  : out std_logic
);
end Sine_Wave_Gen;

architecture Behavioral of Sine_Wave_Gen is

constant SIN_TABLE_Length          : integer := 128;
constant SIN_DATA_WIDTH            : integer := 16;
type SIN_TABLEType is array(0 to SIN_TABLE_Length-1) of integer;
constant SIN_TABLE : SIN_TABLEType :=(0,1607,3211,4808,6392,7961,9512,11039,12539,14010,15446,16846,18204,19519,20787,22005,23170,24279,25330,26319,27245,28106,28898,29621,30273,30852,31357,31785,32138,32413,32610,32728,32767,32728,32610,32413,32138,31785,31357,30852,30273,29621,28898,28106,27245,26319,25330,24279,23170,22005,20787,19519,18204,16846,15446,14010,12539,11039,9512,7962,6392,4808,3211,1607,0,-1607,-3211,-4807,-6392,-7961,-9511,-11039,-12539,-14010,-15446,-16846,-18204,-19519,-20787,-22005,-23170,-24279,-25329,-26319,-27245,-28106,-28898,-29621,-30273,-30852,-31356,-31785,-32138,-32413,-32610,-32728,-32767,-32728,-32610,-32413,-32138,-31785,-31357,-30852,-30273,-29621,-28898,-28106,-27245,-26319,-25329,-24279,-23170,-22005,-20787,-19519,-18204,-16846,-15446,-14010,-12539,-11039,-9511,-7961,-6392,-4807,-3211,-1607);
attribute ram_style : string;
attribute ram_style of SIN_TABLE : constant is "block";
signal indx_cycle                  : integer := IP_INPUT_FREQUENCY/OUTPUT_SIGNAL_FREQUENCY/SIN_TABLE_Length;
signal sin_indx                    : unsigned(6 downto 0) := (others=>'0');
signal cnt                         : unsigned(31 downto 0) := (others=>'0');

begin
indx_cycle  <= 0 when MAX_OUTPUT_SIGNAL_FRQ=true;
process(M_AXIS_ACLK)
begin
    if rising_edge(M_AXIS_ACLK) then
       if (M_AXIS_ARESETN='0') then    --- Asynch reset
           cnt             <= (others=>'0');
           sin_indx        <= (others=>'0');
           M_AXIS_tVALID   <= '0';
       else
           cnt             <= cnt+1;
           M_AXIS_tVALID   <= '0';
           if(cnt=indx_cycle)then
               cnt        <= (others=>'0');
               sin_indx   <= sin_indx+1;
               if(sin_indx=SIN_TABLE_Length-1) then
                   sin_indx       <= (others=>'0');
               end if;
               M_AXIS_tVALID  <= '1';
               M_AXIS_tDATA   <= std_logic_vector(to_signed(SIN_TABLE(to_integer(sin_indx)),SIN_DATA_WIDTH));
           end if;
       end if;
    end if;
end process;
end Behavioral;
