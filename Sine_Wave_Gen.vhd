-- Generated by sine_wave_generator.c
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Sine_Wave_Gen is
generic (
    IP_INPUT_FREQUENCY         : integer := 100000000; --- in Hz
    OUTPUT_SIGNAL_FREQUENCY    : integer := 50;        --- in Hz, max = M_AXIS_ACLK/1000, if you need more, make MAX_OUTPUT_SIGNAL_FRQ true
    MAX_OUTPUT_SIGNAL_FRQ      : boolean := false      --- true this if you need more than M_AXIS_ACLK/1000 then you can achieve M_AXIS_ACLK/500
);
Port (
    M_AXIS_ACLK    : in STD_LOGIC;
    M_AXIS_ARESETN : in STD_LOGIC;   --- negative asynch reset
    M_AXIS_tDATA   : out std_logic_vector(14 downto 0);
    M_AXIS_tVALID  : out std_logic
);
end Sine_Wave_Gen;

architecture Behavioral of Sine_Wave_Gen is
constant SIN_TABLE_Length       : integer := 500;
constant SIN_DATA_WIDTH         : integer := 15;
type SIN_TABLEType is array(0 to SIN_TABLE_Length-1) of integer;
constant SIN_TABLE : SIN_TABLEType :=(0,205,411,617,823,1028,1234,1439,1644,1849,2053,2257,2461,2664,2867,3070,3272,3473,3674,3874,4074,4273,4472,4669,4866,5062,5258,5452,5646,5839,6031,6222,6412,6601,6789,6975,7161,7346,7529,7712,7893,8072,8251,8428,8604,8778,8952,9123,9294,9462,9630,9796,9960,10123,10284,10443,10601,10757,10911,11064,11215,11364,11512,11657,11801,11943,12083,12221,12357,12491,12624,12754,12882,13008,13132,13254,13374,13492,13608,13722,13833,13942,14049,14154,14257,14357,14455,14551,14644,14735,14824,14911,14995,15077,15156,15233,15308,15380,15449,15517,15582,15644,15704,15761,15816,15869,15919,15966,16011,16053,16093,16131,16165,16198,16227,16254,16279,16301,16320,16337,16351,16363,16372,16378,16382,16383,16382,16378,16372,16363,16351,16337,16320,16301,16279,16254,16227,16198,16165,16131,16093,16053,16011,15966,15919,15869,15816,15761,15704,15644,15582,15517,15449,15380,15308,15233,15156,15077,14995,14911,14824,14735,14644,14551,14455,14357,14257,14154,14049,13942,13833,13722,13608,13492,13374,13254,13132,13008,12882,12754,12624,12491,12357,12221,12083,11943,11801,11657,11512,11364,11215,11064,10911,10757,10601,10443,10284,10123,9960,9796,9630,9463,9294,9123,8952,8779,8604,8428,8251,8072,7893,7712,7529,7346,7161,6976,6789,6601,6412,6222,6031,5839,5646,5453,5258,5063,4866,4669,4472,4273,4074,3874,3674,3473,3272,3070,2867,2664,2461,2257,2053,1849,1644,1439,1234,1028,823,617,411,205,0,-205,-411,-617,-823,-1028,-1234,-1439,-1644,-1848,-2053,-2257,-2461,-2664,-2867,-3069,-3271,-3473,-3674,-3874,-4074,-4273,-4471,-4669,-4866,-5062,-5258,-5452,-5646,-5839,-6031,-6222,-6412,-6601,-6789,-6975,-7161,-7346,-7529,-7711,-7892,-8072,-8251,-8428,-8604,-8778,-8952,-9123,-9294,-9462,-9630,-9795,-9960,-10122,-10283,-10443,-10601,-10757,-10911,-11064,-11215,-11364,-11512,-11657,-11801,-11943,-12083,-12221,-12357,-12491,-12623,-12754,-12882,-13008,-13132,-13254,-13374,-13492,-13608,-13721,-13833,-13942,-14049,-14154,-14257,-14357,-14455,-14551,-14644,-14735,-14824,-14911,-14995,-15077,-15156,-15233,-15308,-15380,-15449,-15517,-15582,-15644,-15704,-15761,-15816,-15869,-15919,-15966,-16011,-16053,-16093,-16131,-16165,-16198,-16227,-16254,-16279,-16301,-16320,-16337,-16351,-16363,-16372,-16378,-16382,-16383,-16382,-16378,-16372,-16363,-16351,-16337,-16320,-16301,-16279,-16254,-16227,-16198,-16165,-16131,-16093,-16053,-16011,-15966,-15919,-15869,-15816,-15761,-15704,-15644,-15582,-15517,-15449,-15380,-15308,-15233,-15156,-15077,-14995,-14911,-14824,-14735,-14644,-14551,-14455,-14357,-14257,-14154,-14049,-13942,-13833,-13721,-13608,-13492,-13374,-13254,-13132,-13008,-12882,-12754,-12623,-12491,-12357,-12221,-12083,-11943,-11801,-11657,-11512,-11364,-11215,-11064,-10911,-10757,-10601,-10443,-10283,-10122,-9960,-9795,-9630,-9462,-9293,-9123,-8951,-8778,-8604,-8428,-8251,-8072,-7892,-7711,-7529,-7346,-7161,-6975,-6788,-6600,-6411,-6221,-6031,-5839,-5646,-5452,-5258,-5062,-4866,-4669,-4471,-4273,-4074,-3874,-3674,-3473,-3271,-3069,-2867,-2664,-2460,-2257,-2053,-1848,-1643,-1438,-1233,-1028,-822,-617,-411,-205);

signal indx_cycle      : integer := IP_INPUT_FREQUENCY/OUTPUT_SIGNAL_FREQUENCY/SIN_TABLE_Length;
signal sin_indx        : unsigned(8 downto 0) := (others=>'0');
signal cnt             : unsigned(31 downto 0) := (others=>'0');

begin
indx_cycle  <= 0 when MAX_OUTPUT_SIGNAL_FRQ=true;
process(M_AXIS_ACLK)
begin
    if rising_edge(M_AXIS_ACLK) then
       if (M_AXIS_ARESETN='0') then    --- Asynch reset
           cnt             <= (others=>'0');
           sin_indx        <= (others=>'0');
           M_AXIS_tVALID   <= '0';
       else
           cnt             <= cnt+1;
           M_AXIS_tVALID   <= '0';
           if(cnt=indx_cycle)then
               cnt        <= (others=>'0');
               sin_indx   <= sin_indx+1;
               if(sin_indx=SIN_TABLE_Length-1) then
                   sin_indx       <= (others=>'0');
               end if;
               M_AXIS_tVALID  <= '1';
               M_AXIS_tDATA   <= std_logic_vector(to_signed(SIN_TABLE(to_integer(sin_indx)),SIN_DATA_WIDTH));
           end if;
       end if;
    end if;
end process;
end Behavioral;
